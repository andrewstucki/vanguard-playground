// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: playground/v1/message.proto

package playgroundv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/andrewstucki/vanguard-playground/internal/gen/playground/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "playground.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceGetMessageProcedure is the fully-qualified name of the MessageService's GetMessage
	// RPC.
	MessageServiceGetMessageProcedure = "/playground.v1.MessageService/GetMessage"
	// MessageServiceCreateMessageProcedure is the fully-qualified name of the MessageService's
	// CreateMessage RPC.
	MessageServiceCreateMessageProcedure = "/playground.v1.MessageService/CreateMessage"
	// MessageServiceDeleteMessageProcedure is the fully-qualified name of the MessageService's
	// DeleteMessage RPC.
	MessageServiceDeleteMessageProcedure = "/playground.v1.MessageService/DeleteMessage"
	// MessageServiceListMessagesProcedure is the fully-qualified name of the MessageService's
	// ListMessages RPC.
	MessageServiceListMessagesProcedure = "/playground.v1.MessageService/ListMessages"
	// MessageServiceSendMessageProcedure is the fully-qualified name of the MessageService's
	// SendMessage RPC.
	MessageServiceSendMessageProcedure = "/playground.v1.MessageService/SendMessage"
	// MessageServiceMessageStatusProcedure is the fully-qualified name of the MessageService's
	// MessageStatus RPC.
	MessageServiceMessageStatusProcedure = "/playground.v1.MessageService/MessageStatus"
)

// MessageServiceClient is a client for the playground.v1.MessageService service.
type MessageServiceClient interface {
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error)
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	MessageStatus(context.Context, *connect.Request[v1.MessageStatusRequest]) (*connect.Response[v1.MessageStatusResponse], error)
}

// NewMessageServiceClient constructs a client for the playground.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageServiceMethods := v1.File_playground_v1_message_proto.Services().ByName("MessageService").Methods()
	return &messageServiceClient{
		getMessage: connect.NewClient[v1.GetMessageRequest, v1.GetMessageResponse](
			httpClient,
			baseURL+MessageServiceGetMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("GetMessage")),
			connect.WithClientOptions(opts...),
		),
		createMessage: connect.NewClient[v1.CreateMessageRequest, v1.CreateMessageResponse](
			httpClient,
			baseURL+MessageServiceCreateMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("CreateMessage")),
			connect.WithClientOptions(opts...),
		),
		deleteMessage: connect.NewClient[v1.DeleteMessageRequest, v1.DeleteMessageResponse](
			httpClient,
			baseURL+MessageServiceDeleteMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
			connect.WithClientOptions(opts...),
		),
		listMessages: connect.NewClient[v1.ListMessagesRequest, v1.ListMessagesResponse](
			httpClient,
			baseURL+MessageServiceListMessagesProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ListMessages")),
			connect.WithClientOptions(opts...),
		),
		sendMessage: connect.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+MessageServiceSendMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("SendMessage")),
			connect.WithClientOptions(opts...),
		),
		messageStatus: connect.NewClient[v1.MessageStatusRequest, v1.MessageStatusResponse](
			httpClient,
			baseURL+MessageServiceMessageStatusProcedure,
			connect.WithSchema(messageServiceMethods.ByName("MessageStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	getMessage    *connect.Client[v1.GetMessageRequest, v1.GetMessageResponse]
	createMessage *connect.Client[v1.CreateMessageRequest, v1.CreateMessageResponse]
	deleteMessage *connect.Client[v1.DeleteMessageRequest, v1.DeleteMessageResponse]
	listMessages  *connect.Client[v1.ListMessagesRequest, v1.ListMessagesResponse]
	sendMessage   *connect.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	messageStatus *connect.Client[v1.MessageStatusRequest, v1.MessageStatusResponse]
}

// GetMessage calls playground.v1.MessageService.GetMessage.
func (c *messageServiceClient) GetMessage(ctx context.Context, req *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return c.getMessage.CallUnary(ctx, req)
}

// CreateMessage calls playground.v1.MessageService.CreateMessage.
func (c *messageServiceClient) CreateMessage(ctx context.Context, req *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error) {
	return c.createMessage.CallUnary(ctx, req)
}

// DeleteMessage calls playground.v1.MessageService.DeleteMessage.
func (c *messageServiceClient) DeleteMessage(ctx context.Context, req *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// ListMessages calls playground.v1.MessageService.ListMessages.
func (c *messageServiceClient) ListMessages(ctx context.Context, req *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return c.listMessages.CallUnary(ctx, req)
}

// SendMessage calls playground.v1.MessageService.SendMessage.
func (c *messageServiceClient) SendMessage(ctx context.Context, req *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// MessageStatus calls playground.v1.MessageService.MessageStatus.
func (c *messageServiceClient) MessageStatus(ctx context.Context, req *connect.Request[v1.MessageStatusRequest]) (*connect.Response[v1.MessageStatusResponse], error) {
	return c.messageStatus.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the playground.v1.MessageService service.
type MessageServiceHandler interface {
	GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error)
	CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error)
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error)
	ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error)
	SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error)
	MessageStatus(context.Context, *connect.Request[v1.MessageStatusRequest]) (*connect.Response[v1.MessageStatusResponse], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceMethods := v1.File_playground_v1_message_proto.Services().ByName("MessageService").Methods()
	messageServiceGetMessageHandler := connect.NewUnaryHandler(
		MessageServiceGetMessageProcedure,
		svc.GetMessage,
		connect.WithSchema(messageServiceMethods.ByName("GetMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceCreateMessageHandler := connect.NewUnaryHandler(
		MessageServiceCreateMessageProcedure,
		svc.CreateMessage,
		connect.WithSchema(messageServiceMethods.ByName("CreateMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceDeleteMessageHandler := connect.NewUnaryHandler(
		MessageServiceDeleteMessageProcedure,
		svc.DeleteMessage,
		connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceListMessagesHandler := connect.NewUnaryHandler(
		MessageServiceListMessagesProcedure,
		svc.ListMessages,
		connect.WithSchema(messageServiceMethods.ByName("ListMessages")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceSendMessageHandler := connect.NewUnaryHandler(
		MessageServiceSendMessageProcedure,
		svc.SendMessage,
		connect.WithSchema(messageServiceMethods.ByName("SendMessage")),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceMessageStatusHandler := connect.NewUnaryHandler(
		MessageServiceMessageStatusProcedure,
		svc.MessageStatus,
		connect.WithSchema(messageServiceMethods.ByName("MessageStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/playground.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceGetMessageProcedure:
			messageServiceGetMessageHandler.ServeHTTP(w, r)
		case MessageServiceCreateMessageProcedure:
			messageServiceCreateMessageHandler.ServeHTTP(w, r)
		case MessageServiceDeleteMessageProcedure:
			messageServiceDeleteMessageHandler.ServeHTTP(w, r)
		case MessageServiceListMessagesProcedure:
			messageServiceListMessagesHandler.ServeHTTP(w, r)
		case MessageServiceSendMessageProcedure:
			messageServiceSendMessageHandler.ServeHTTP(w, r)
		case MessageServiceMessageStatusProcedure:
			messageServiceMessageStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) GetMessage(context.Context, *connect.Request[v1.GetMessageRequest]) (*connect.Response[v1.GetMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.GetMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) CreateMessage(context.Context, *connect.Request[v1.CreateMessageRequest]) (*connect.Response[v1.CreateMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.CreateMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[v1.DeleteMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.DeleteMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) ListMessages(context.Context, *connect.Request[v1.ListMessagesRequest]) (*connect.Response[v1.ListMessagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.ListMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) SendMessage(context.Context, *connect.Request[v1.SendMessageRequest]) (*connect.Response[v1.SendMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.SendMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) MessageStatus(context.Context, *connect.Request[v1.MessageStatusRequest]) (*connect.Response[v1.MessageStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("playground.v1.MessageService.MessageStatus is not implemented"))
}
