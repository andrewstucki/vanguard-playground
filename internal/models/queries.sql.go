// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package models

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
  id, text
) VALUES (
  ?, ?
)
RETURNING id, text
`

type CreateMessageParams struct {
	ID   string
	Text string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ID, arg.Text)
	var i Message
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}

const createSentMessage = `-- name: CreateSentMessage :one
INSERT INTO sent_messages (
  id, message_id, text, result
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, message_id, text, result
`

type CreateSentMessageParams struct {
	ID        string
	MessageID string
	Text      string
	Result    string
}

func (q *Queries) CreateSentMessage(ctx context.Context, arg CreateSentMessageParams) (SentMessage, error) {
	row := q.db.QueryRowContext(ctx, createSentMessage,
		arg.ID,
		arg.MessageID,
		arg.Text,
		arg.Result,
	)
	var i SentMessage
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Text,
		&i.Result,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, text FROM messages
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(&i.ID, &i.Text)
	return i, err
}

const getSentMessage = `-- name: GetSentMessage :one
SELECT id, message_id, text, result FROM sent_messages
WHERE id = ? AND message_id = ? LIMIT 1
`

type GetSentMessageParams struct {
	ID        string
	MessageID string
}

func (q *Queries) GetSentMessage(ctx context.Context, arg GetSentMessageParams) (SentMessage, error) {
	row := q.db.QueryRowContext(ctx, getSentMessage, arg.ID, arg.MessageID)
	var i SentMessage
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Text,
		&i.Result,
	)
	return i, err
}

const getSentMessageByID = `-- name: GetSentMessageByID :one
SELECT id, message_id, text, result FROM sent_messages
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSentMessageByID(ctx context.Context, id string) (SentMessage, error) {
	row := q.db.QueryRowContext(ctx, getSentMessageByID, id)
	var i SentMessage
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Text,
		&i.Result,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, text FROM messages
`

func (q *Queries) ListMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(&i.ID, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSentMessage = `-- name: UpdateSentMessage :one
UPDATE sent_messages
set result = ?
WHERE id = ?
RETURNING id, message_id, text, result
`

type UpdateSentMessageParams struct {
	Result string
	ID     string
}

func (q *Queries) UpdateSentMessage(ctx context.Context, arg UpdateSentMessageParams) (SentMessage, error) {
	row := q.db.QueryRowContext(ctx, updateSentMessage, arg.Result, arg.ID)
	var i SentMessage
	err := row.Scan(
		&i.ID,
		&i.MessageID,
		&i.Text,
		&i.Result,
	)
	return i, err
}
